# vim: set nowrap filetype=zsh:
#
# notify-if-background will exit with status 1 if the terminal application is
# not one for which we know how to query the "frontmost/background" status, and
# with status 2 if the terminal application or the current shell tab/window is
# active. See README.md for configuration options.
() {
    local type message notifier

    # Take seconds as first argument and format it as Xs, XX:XX or XX:XX:XX
    format-time() {
      t="$1"

      if [[ "$t" -lt 60 ]]; then
        format="%ss"
      elif [[ "$t" -lt 3600 ]]; then
        format="%M:%S"
      else
        format="%H:%M:%S"
      fi

      zmodload -e zsh/datetime || zmodload zsh/datetime
        TZ=UTC strftime "$format" "$t"
    }

    type=$1
    time_elapsed=$(format-time "$2")
    message=$(<&0)

    function notifier {
        local notification_title message type
        local -A titles
        local -A vars

        titles=(error "#fail" success "#win")
        type=$1
        time_elapsed=$2
        vars=(time_elapsed "$time_elapsed")

        message=$(<&0)

        function replace_vars {
          local text

          text="$1"

          for k in "${(@k)vars}"; do
            v=$vars[$k]
            text=$(echo "$text" | sed "s/#{$k}/$v/" )
          done

          echo $text
        }

        zstyle -s ':notify:' "$type"-title notification_title \
            || notification_title="$titles[$type]"

        notification_title=$(replace_vars "$notification_title")

        zstyle -s ':notify:' "$type"-sound notification_sound
        zstyle -s ':notify:' "$type"-icon icon

        function notifier-mac {
            local app_id app_id_option sound_option

            if [[ "$TERM_PROGRAM" == 'iTerm.app' ]]; then
                app_id="com.googlecode.iterm2"
            elif [[ "$TERM_PROGRAM" == 'Apple_Terminal' ]]; then
                app_id="com.apple.terminal"
            fi

            if [[ ! -z "$app_id" ]]; then
                app_id_option="-activate $app_id"
            fi

            if [[ ! -z "$notification_sound" ]]; then
                sound_option="-sound $notification_sound"
            fi

            echo "$message" | terminal-notifier ${=app_id_option} ${=sound_option} -appIcon "$icon" -title "$notification_title" > /dev/null 2>&1

            if zstyle -t ':notify:' activate-terminal; then
                echo tell app id \"$app_id\" to activate | osascript 1>/dev/null
            fi
        }

        function notifier-linux {
            notify-send -i "$icon" "$notification_title" "$message"

            function play-sound {
              if which paplay > /dev/null 2>&1; then
                paplay "$1"
              elif which aplay > /dev/null 2>&1; then
                aplay "$1"
              elif which ossplay > /dev/null 2>&1; then
                ossplay "$1"
              else
                echo "Could not find a sound file player." >&2
                return 1
              fi
            }

            if [[ ! -z "$notification_sound" ]]; then
                if [[ -a "$notification_sound" ]]; then
                    play-sound "$notification_sound"
                else
                    echo "File $notification_sound not found." >&2
                fi
            fi

            if which wmctrl > /dev/null 2>&1; then
                local parent_pid

                zstyle -s ':notify:' parent-pid parent_pid

                if zstyle -t ':notify:' activate-terminal; then
                    wmctrl -ia $(wmctrl -lp | awk -vpid=$parent_pid '$3==pid {print $1; exit}')
                elif ! (zstyle -t ':notify:' disable-urgent); then
                    wmctrl -i -r $(wmctrl -lp | awk -vpid=$parent_pid '$3==pid {print $1; exit}') -b add,demands_attention
                fi
            fi
        }

        if which terminal-notifier > /dev/null 2>&1; then
            notifier-mac
        elif which notify-send > /dev/null 2>&1; then
            notifier-linux
        else
            echo "No notifier program found." >&2
            return 1
        fi
    }

    zstyle -s ':notify:' error-log error_log \
      || error_log=/dev/stderr
    (
      zstyle -s ':notify:' notifier notifier \
          || notifier=notifier

      echo "$message" | "$notifier" "$type" "$time_elapsed"
    ) 2> "$error_log"

} "$1" "$2"
