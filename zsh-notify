# vim: set nowrap filetype=zsh:
#
# zsh-notify sends the "command complete" notification using stdin as the message.
# The first argument is used to select between two possible templates for the
# notification title and must be one of "success" or "error", the second argument
# is the time the command took to complete, in seconds.
() {
    local type message notifier

    # format-time takes a number of seconds as first argument and format it
    # as Xs, XX:XX or XX:XX:XX
    function format-time() {
        local format t
        t="$1"

        if [[ "$t" -lt 60 ]]; then
            format="%ss"
        elif [[ "$t" -lt 3600 ]]; then
            format="%M:%S"
        else
            format="%H:%M:%S"
        fi

        zmodload -e zsh/datetime || zmodload zsh/datetime
        TZ=UTC strftime "$format" "$t"
    }

    type="$1"
    time_elapsed=$(format-time "$2")
    message=$(<&0)

    function notifier {
        local notification_title message type
        local -A titles

        type="$1"
        time_elapsed="$2"
        titles=(error "#fail" success "#win")
        local -A vars
        vars=(time_elapsed "$time_elapsed")

        message=$(<&0)

        zstyle -s ':notify:' "$type"-title notification_title \
            || notification_title="$titles[$type]"

        zstyle -s ':notify:' "$type"-sound notification_sound
        zstyle -s ':notify:' "$type"-icon icon

        function replace-vars {
            local text v

            text=$(<&0)

            for k in "${(@k)vars}"; do
              v=$vars[$k]
              text=$(sed "s/#{$k}/$v/" <<< "$text")
            done

            echo "$text"
        }

        notification_title=$(replace-vars <<< "$notification_title")

        function notifier-mac {
            local app_id app_id_option sound_option

            if [[ "$TERM_PROGRAM" == 'iTerm.app' ]]; then
                app_id="com.googlecode.iterm2"
            elif [[ "$TERM_PROGRAM" == 'Apple_Terminal' ]]; then
                app_id="com.apple.terminal"
            fi

            if [[ ! -z "$app_id" ]]; then
                app_id_option="-activate $app_id"
            fi

            if [[ ! -z "$notification_sound" ]]; then
                sound_option="-sound $notification_sound"
            fi

            terminal-notifier ${=app_id_option} \
                ${=sound_option} \
                -appIcon "$icon" \
                -title "$notification_title" <<< "$message" > /dev/null 2>&1

            if zstyle -t ':notify:' activate-terminal; then
                osascript <<< "tell app id \"$app_id\" to activate" 1>/dev/null
            fi
        }

        function notifier-linux {
            notify-send -i "$icon" "$notification_title" "$message"

            function play-sound {
                if which paplay > /dev/null 2>&1; then
                    paplay "$1"
                elif which aplay > /dev/null 2>&1; then
                    aplay "$1"
                elif which ossplay > /dev/null 2>&1; then
                    ossplay "$1"
                else
                    echo "Could not find a sound file player." >&2
                    return 1
                fi
            }

            if [[ ! -z "$notification_sound" ]]; then
                if [[ -a "$notification_sound" ]]; then
                    play-sound "$notification_sound"
                else
                    echo "File $notification_sound not found." >&2
                fi
            fi

            if which wmctrl > /dev/null 2>&1; then
                local parent_pid

                zstyle -s ':notify:' parent-pid parent_pid

                if zstyle -t ':notify:' activate-terminal; then
                    wmctrl -ia $(wmctrl -lp | awk -vpid=$parent_pid '$3==pid {print $1; exit}')
                elif ! (zstyle -t ':notify:' disable-urgent); then
                    wmctrl -i -r $(wmctrl -lp | awk -vpid=$parent_pid '$3==pid {print $1; exit}') -b add,demands_attention
                fi
            fi
        }

        if which terminal-notifier > /dev/null 2>&1; then
            notifier-mac
        elif which notify-send > /dev/null 2>&1; then
            notifier-linux
        else
            echo "No notifier program found." >&2
            return 1
        fi
    }

    zstyle -s ':notify:' notifier notifier || notifier=notifier

    "$notifier" "$type" "$time_elapsed" <<< "$message" 

} "$1" "$2"
